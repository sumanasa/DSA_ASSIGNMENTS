2. Your city has n junctions. There are m one-way roads between the junctions. As a mayor of the city, you
have to ensure the security of all the junctions. To ensure the security, you have to build some police
checkposts. Checkposts can only be built in a junction. A checkpost at junction i can protect junction j if
either i = j or the police patrol car can go to j from i and then come back to i. Building checkposts costs some
money. As some areas of the city are more expensive than others, building checkposts at some junctions
might require more money than other junctions. You have to determine the minimum possible money
needed to ensure the security of all the junctions. Also, you have to find the number of ways in which security
can be ensured in minimum price and also using minimum number of checkposts. Two ways are different if
any of the junctions contains a checkpost in one of them and do not contain in the other.
Input:
In the first line, you will be given an integer n, number of junctions.
In the next line, n space-separated integers will be given. The i
th integer is the cost of building a checkpost at
the i
th junction.
The next line will contain an integer m. 
Each of the next m lines contains two integers ui and vi. A pair ui, vi means, that there is a one-way road
which goes from ui to vi. There will not be more than one road between two nodes in the same direction.
Output:
Print two integers separated by spaces. The first one is the minimum possible money needed to ensure the
security of all the junctions. The second one is the number of ways you can ensure the security with the
minimum cost.
Example:
Input:
3
1 2 3
3
1 2
2 3
3 2
Output:
3 1
*************************************************************************
#include<stdio.h>
#include <string.h>
/* KOSARAJU'S ALGORITHM for SCC */
#define N 1000
int n,m,p,q,cost[N],adj[N][N],visited[N],stack[N],comp[N],ways=1,tcost;
void counter(int size){
    int min = 999,freq = 0,comp_cost = 0;
    for(int i=0;i<size;i++){
        printf("%d ",comp[i]+1);
        if(min > cost[comp[i]]){
            freq = 0; comp_cost = cost[comp[i]];
            min = cost[comp[i]];
        }
        if(min == cost[comp[i]])
            freq++;
    }
    printf("\n");
    ways = ways*freq;
    tcost += comp_cost;
}
void dfs(int x){
    visited[x] = 1;
    for(int i=0;i<n;i++){
        if(adj[x][i] && !visited[i])
            dfs(i);
    }
    stack[p++] = x;
}
void dfs2(int x){
    visited[x] = 1;
    comp[q++] = x;
    for(int i=0;i<n;i++){
        if(adj[i][x] && !visited[i]){
            dfs2(i);
        }
    }
}
int main(){
    scanf("%d",&n);
    for(int i=0;i<n;i++){
        scanf("%d",&cost[i]);
    }
    scanf("%d",&m);
    for(int i=0;i<m;i++){
        int x,y;
        scanf("%d%d",&x,&y);
        adj[x-1][y-1] = 1;
    }
    for(int i=0;i<n;i++){
        if(!visited[i])
            dfs(i);
    }
    memset(visited,0,sizeof(visited));
    for(int i= p-1;i>=0;i--){
        int node = stack[i];
        if(!visited[node]){
            q=0;
            dfs2(node);
            printf("comp : ");
            counter(q);
        }
    }
    printf("Cost : %d ways : %d\n",tcost,ways);
}
/*
[ INDEX from 0 ]
5
2 2 3 4 5
5
1 0
0 2
2 1
0 3
3 4
o/p : 11 , 3
[ INDEX from 1 ]
5
2 2 3 4 5
5
2 1
1 3
3 2
1 4
4 5

o/p : 11 , 3
 */
