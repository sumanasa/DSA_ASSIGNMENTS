3. Aroma is a very unique restaurant. They don’t ask for money, but instead request you to carry out certain
operations on their behalf. They ask you to insert an element into an already sorted list, delete an element
from the sorted list, swap pairs of elements of the list and finally sort the list after swapping(s). You are also
required to print the list after every operation. Note that you are not allowed to have vacant positions in the
list after deletions and no insertion will be done after swapping (since after every insertion the list needs to
remain sorted). Insertions are possible after deletions. After swapping(s), deletions are however, possible.
At any point of time, the list will contain only unique elements, assuming that you will not be asked to insert
a duplicate element in the list at any point of time. Moreover, you do not know apriori, how many insertion
and deletions you will be asked to carry out.
Input:
The first line contains the elements for the existing list in sorted (ascending) order.
The second line contains the number N of operations to be carried out.
Following N lines contain the details of the operations
● For insertion - I Number to be inserted
● For deletion - D Number to be deleted
● For swapping - SW Numbers to be swapped
● For sorting - SO
Output:
The intermediate array after every operation
Example
Input:
3 5 6 8 10 15
13
I 1
I 7
I 18
D 5
D 10
I 2
I 4
I 9
SW 4 18
SW 1 6
D 1
D 7
SO
Output:
1 3 5 6 8 10 15
1 3 5 6 7 8 10 15
1 3 5 6 7 8 10 15 18
1 3 6 7 8 10 15 18
1 3 6 7 8 15 18
1 2 3 6 7 8 15 18
1 2 3 4 6 7 8 15 18
1 2 3 4 6 7 8 9 15 18
1 2 3 18 6 7 8 9 15 4
6 2 3 18 1 7 8 9 15 4
6 2 3 18 7 8 9 15 4
6 2 3 18 8 9 15 4
2 3 4 6 8 9 15 18

***************************************************************************************************************************
[DON'T BE SCARED . IT IS JUST 100 TO 110 LINES . BASIC LINKEDLIST FUNCTIONS]
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node{
    int data ;
    struct Node* next;
};
typedef struct Node node;
void insert(node** head,int x){
    node* new_node  = (node*) malloc(sizeof(node)); //create and initialize
    new_node->data = x;
    new_node->next = NULL;
    
    node* temp = *head;
    if(temp == NULL || temp->data >= x ){       //if empty or to be added at the beginning
        new_node->next = *head;
        *head = new_node;
    }
    else{
        while( (temp->next != NULL) && (temp->next->data < x) ){ // move to the index before the index of the element to be added
            temp = temp->next;
        }
        new_node->next = temp->next;             //connection between new node and the one after it
        temp->next = new_node;                   //connection between left node and the new node
    }     
}
void delete(node** head,int x){
     node* temp = *head;
     if(temp == NULL)                           // if empty
         return ;
     if(temp->data == x){                        // if its the first element then alter head_ref
         *head = temp->next;
         free(temp);
         return ;
     }
     while(temp->next->data != x && temp->next != NULL ){       // move to the one before the Del_node
            temp = temp->next;
     }
     node* del = temp->next;                     //store add of Del_node
     temp->next = del->next;                     //connection between left and right nodes of Del_node
     free(del);
}
void swap(node** head,int x,int y){
    node* nodex ;
    node* nodey ;
    node* temp = *head;
    if(temp->data == x){
        nodex = temp;
    }
    else{
        while(temp->next->data != x && temp->next != NULL){
                temp = temp->next;
        }
        nodex = temp->next;                       // store add of node_x                  
    }
    temp = *head;
    if(temp->data == y){
        nodey = temp;
    }
    else{
        while(temp->next->data != y && temp->next != NULL){
                temp = temp->next;
        }
        nodey = temp->next;                        // store add of node_y
    }
    nodex->data = y;                               // change values
    nodey->data = x;
}
void sort(node** head){                            //access each element and insert it to new list
    node* new_head = NULL;
    node* temp = *head;
    while(temp != NULL){
        insert(&new_head,temp->data);
        temp = temp->next;
    }
    *head = new_head;                              //assign new_head to original head
}
void printlist(node** head){
    node* temp= * head;
    while(temp!=NULL){
        printf("%d ",temp->data);
        temp = temp->next;
    }
    printf("\n");
}
int main() {
    int x,n,a,b;
    char ch;
    char s[2];
    node* head_ref = NULL;
    while(scanf("%d",&x)){
        scanf("%c",&ch);
        insert(&head_ref,x);
        if(ch != ' ')
            break;
    }
    scanf("%d",&n);
    while(n--){
        scanf("%s",s);
        if(strcmp(s,"I")==0){
            scanf("%d",&a);
            insert(&head_ref,a);
        }       
        else if(strcmp(s,"D") == 0){
            scanf("%d",&a);
            delete(&head_ref,a);
        }
        else if(strcmp(s,"SW") == 0){
            scanf("%d%d",&a,&b);
            swap(&head_ref,a,b);
        }        
        else if(strcmp(s,"SO") == 0){
            sort(&head_ref);
        }   
        printlist(&head_ref);
    }
    return 0;
}
