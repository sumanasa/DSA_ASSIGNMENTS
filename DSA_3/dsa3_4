4. You are living in a country that has n cities (numbered from 1 to n) connected to each other using n-1
bidirectional roads. No city is completely isolated from all the other cities. Each road connects two cities.
(Represent this scenario as an undirected, acyclic, connected graph). You love walking and you plan to walk
between two cities (u, v), taking the shortest path from u to v.
There are 2 special cities that you dislike visiting namely (x, y). You will avoid all possible paths, in which you
first encounter x and then y. The other permutation (first y then x) is allowed. Individual cities x and y
appearing separately in the route are fine too. Find out the total number of possible (u, v) pairs such that
you do not encounter first the city x then the city y in your route while you are travelling from city u to city
v.
Input:
First line contains n, x, y.
Each of the next n-1 lines contains two integers, denoting that these two cities are connected.
Output:
A single integer denoting the total number pairs of cities that follow the restriction.
Example:
3 1 3
1 2
2 3
Answer:
5
Explanation: Path 1 (1 to 2), Path 2 (2 to 1), Path 3 (2 to 3), Path 4 (3 to 2) and Path 5 (3 to 2 to 1). The Path
(1 to 2 to 3) is not considered because of the restriction.
**********************************************************************************************************************

#include<stdio.h>
#include<string.h>
int adj[100][100], visited[100],x,y,n,k=0;
void dfs(int u,int v,int flag){
    visited[u]=1;
    if(u==x)
        flag=1;
    else if(u==y && flag==1)
        flag=2;
    if(u==v){
        if(flag!=2)
            k++;
        return ;
    }
    for(int i=1;i<=n;i++)
        if(adj[u][i]==1 && visited[i]==0)
            dfs(i,v,flag);
}
int main()
{
    int u,v,e;
    scanf("%d%d%d", &n, &x, &y);
    for(int i=0;i<n+1;i++)
        for(int j=0;j<n+1;j++)
        adj[i][j]=0;
    for(int i=0;i<n-1;i++){
        scanf("%d %d",&u,&v);
        adj[u][v]=1;
        adj[v][u]=1;
    }
    for(int i=1;i<=n;i++){        // source
        for(int j=1;j<=n;j++){    //destination
          int flag=0;
          memset(visited,0,sizeof(visited)); 
          if(i==x)
              flag=1;
          if(i!=j)
              dfs(i,j,flag);
        }
    }
    printf("%d\n",k);
    return 0; 
}
