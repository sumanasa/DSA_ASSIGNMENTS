3. Given a singly linked list, write a program to shuffle it according to the following rule: segregate all the
elements in such a way that elements at positions k*i (where i starts from 1 and k<=1000, k may not be less
than the number of elements present in the linked list, k may not be a multiple of the number of elements
present in the linked list) appear before the rest of the elements and the remaining elements are appended
in reverse order.
Input:
The first line contains the value of k.
The second line contains the elements of the linked list (The total number of elements present in the linked
list canâ€™t be taken as an input).
Output:
An updated linked list based on the segregation rule described in the problem.
Example:
3
1 2 3 4 5 6 7 8 9
Output:
3 6 9 8 7 5 4 2 1
***********************************************************************************************************************

#include<stdio.h>
#include<string.h>
#include<stdlib.h>

typedef struct Node{
    int data ;
    struct Node *next;

}Node;

int k;
Node *head1,*head2;

void append(Node **head, int d){
    Node *tmp =(Node *)malloc(sizeof(Node));
    tmp->data = d;
    tmp->next = NULL;
    if(*head ==NULL){
        *head = tmp;
    }else{
        Node *iter =*head;
        while(iter->next!=NULL){
            iter = iter->next;
        }
        iter->next = tmp;
    }
}

void revAppend(Node *tmp,int i){
    if(tmp!=NULL){
        revAppend(tmp->next,i+1);
        if((i+1)%k!=0){
            append(&head2, tmp->data);
        }
    }
}

void traverse(Node *tmp){
    printf("\n");
    while(tmp!=NULL){
        printf("%d",tmp->data);
        tmp =tmp->next;
    }
}
int main(){
    scanf("%d",&k);
    int x;
    char c;
    head1=NULL;
    while(scanf("%d",&x)){
        append(&head1,x);
        scanf("%c",&c);
        if(c!=' ') break;
    }
    traverse(head1);
    head2= NULL;
    Node *tmp = head1;
    for(int i=0;tmp!=NULL;i++,tmp=tmp->next){
        if((i+1)%k==0){
            append(&head2, tmp->data);
        }
    }
    revAppend(head1,0);
    traverse(head2);
    return 0;
}
