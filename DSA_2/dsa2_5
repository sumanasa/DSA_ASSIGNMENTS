5. Suppose you are given a set of vertices V such that a factor f is associated with each vertex. For each vertex u belongs to V, f(u) denotes its
factor. An unweighted, undirected graph G can be constructed using the vertices of V according to the following construction algorithm – 
for a pair of vertices, u, v belongs to V, the edge (u, v) is included in G, if |f(u) – f(v)| > t where t is a pre-defined threshold value. 
If the threshold condition is not satisfied, the edge is not included in G. Note that here, the absolute value of the difference between 
f(u) and f(v) have been considered. Given V and t, write a C program to construct the graph G as per the above-mentioned algorithm. 
After graph construction, your program should determine the different connected components of G. Note that a connected component of an 
undirected graph is a subgraph in which any two vertices are connected to each other by paths, and which are connected to no additional 
vertices in the supergraph. The number of connected components in the example graph shown below is 2. 

1 2 3 4 5 
head 
NULL NULL 
1 2 3 4 5 
head 
NULL NULL 

The vertex set V and  are given as user inputs. |V| < 1000, f and t are always integers. You may take the size of V as user input also.
Your program should determine the graph, the number of connected components and the actual components. Display the output graph and each
connected component as separate adjacency matrices. 

EDIT : Q5. The input to the problem will be the vertex set V, factor of each vertex and t. |V| < 1000, f
and t are positive integers.
***********************************************************************************************************************************

#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>
#include<string.h>

int c=0,n,vis[1000];
int part[1000];
bool graph[100][100];
bool comp[100][100];

void dfs(int u)
{
    part[u]=c;
    vis[u]=1; 
    for(int v = 0; v < n; ++v)
    {
        if(graph[u][v])
        {
            comp[u][v]=1;
            if(vis[v]==0)
            {
                dfs(v);
            }
        }
    }        
}
int main()
{
        int t=0;
        int d,f[100];
	printf("enter no of vertices n and d \n");
	scanf("%d%d",&n,&d);
        for(int i = 0; i < n; ++i)
            scanf("%d", f+i);
	for(int u = 0; u < n; ++u)
            for(int v = 0; v < n; ++v)
                graph[u][v] = (abs(f[u] - f[v]) >= d);
	for(int ver = 0; ver < n; ++ver)
        {
            if(vis[ver]==0)
            {
                dfs(ver);
                printf("component %d : \n",++t);
                for(int u = 0; u < n; ++u)
                {
                    for(int v = 0; v < n; ++v)
                        printf("%d ",comp[u][v]);

                    printf("\n");
                }
                printf("\n");
                memset(comp,0,sizeof(comp));
        
            }   
        }
        printf("Adjacency matrix : \n");
        for(int u = 0; u < n; ++u)
        {
            for(int v = 0; v < n; ++v)
                printf("%d ",graph[u][v]);
            
            printf("\n");
        }
    return 0;   
           
}
