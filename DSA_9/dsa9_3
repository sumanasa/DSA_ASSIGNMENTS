3. You are given q queries. Each query consists of a single number N. You can perform any one of the given
operations in each move:
i. If we take 2 integers a and b where N = a*b then we can change N = max(a, b).
ii. Decrease the value of N by 1.
Determine the minimum number of moves required to reduce the value of N to 0.
Input
The first line contains the integer q.
The next q lines each contain an integer N.
OutputOutput q lines, each line containing the minimum number of moves required to reduce the value of N to 0.
Example –
Input -
2
3
4
Output –
3
3
****************************************************************
Method 0:
#include<stdio.h>
#include<math.h>
int get_maxfactor(int n){
   for(int i=n-1;i>1;i--){
       if(n%i==0)
            return i;
   }
   return -1;
}
int main(){
    int q,n,ans=0;
    scanf("%d",&q); // 'q' -> no.of test cases
    while(q--){
        scanf("%d",&n);
        while(n>0){
        int factor = get_maxfactor(n);
        if(factor > 0){ n = factor; ans++; }
        else {  n--; ans++; }
        }
        printf("%d\n",ans);
    }
    return 0;
}
*************************************************************
METHOD 1 : ITERATIVE
#include <stdio.h>
#define N 10000
int sum=0 , k=0, steps[N];
int isprime(int x){
    for(int i=2;i<x;i++){
        if(x%i == 0)
            return 0;
    }
    return 1;
}
void count(int n){
    for(int i=1;i<=n;i++){
        int sum = 0;
        int x = i;
        while(x != 0){
            if(isprime(x)){
                sum++;
                x--;
                printf("    if   x : %d and sum : %d\n",x,sum);
            } 
            else{
                for(int i=x-1;i>1;i--){
                    if(x%i == 0){
                        x = i;
                        break;
                    }
                }
                printf("    else x : %d and sum : %d\n",x,sum);
                sum = steps[x]+1;
                x = 0;
            }
            printf("ans for : %d is : %d\n",i,sum);
            steps[i] = sum;
        } 
    }
}
int main(){
    int n , max=-1;
    scanf("%d",&n);
    int values[n];
    for(int i=0;i<n;i++){
        scanf("%d",&values[i]);
        steps[i]=0;
        if(max < values[i])
            max = values[i];
    }
    count(max);
    for(int i=0;i<n;i++){
        printf("%d ",steps[values[i]]);
    }
    return 0;
}
***********************************************************************
METHOD 2: RECURSIVE
#include <stdio.h>
int sum=0 , k=0;
int isprime(int x){
    for(int i=2;i<x;i++){
        if(x%i == 0)
            return 0;
    }
    return 1;
}
void count(int x){
    printf("    call x : %d and sum : %d\n",x,sum);
    while(x != 0){
        if(isprime(x)){
            sum += x;
            x = 0;
            printf("    if   x : %d and sum : %d\n",x,sum);
        } 
        else{
            sum++;
            for(int i=x;i>=0;i--){
                if(x%i == 0){
                    x = i;
                    break;
                }
            }
            x--;
            printf("    else x : %d and sum : %d\n",x,sum);
            count(x);
        }
    }  
}
int main(){
    int n;
    scanf("%d",&n);
    int values[n],steps[n];
    for(int i=0;i<n;i++){
        scanf("%d",&values[i]);
        steps[i]=0;
    }
    for(int i=0;i<n;i++){
        sum = 0;
        printf("calculate for : %d\n",values[i]);
        count(values[i]);
        steps[i] = sum;
    }
    for(int i=0;i<n;i++){
        printf("%d ",steps[i]);
    }
    return 0;
}
