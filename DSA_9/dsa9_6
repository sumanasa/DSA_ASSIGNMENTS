6. Given a matrix city, each square grid[i][j] represents the height of the building at that point (i, j). Assume
that you can swim from one building terrace if they are at same level.
Now rain starts to fall. At time t, the depth of the water everywhere is t. You can swim from a square to
another 4-directionally adjacent square (no diagonal moves) if and only if the elevations of both squares
individually are at most t. You can swim infinite distance in zero time. Of course, you must stay within the
boundaries of the grid during your swim.
You start at the top left building (0, 0). What is the least time in which you can reach the bottom right building
(N - 1, N - 1)?

Sample Input
2
0 2
1 3
Sample Output
3

Sample Input: 
5
0  1  2  3  4
24 23 22 21 5
12 13 14 15 16
11 17 18 19 20
10 9  8  7  6
Sample Output:
16

Sample Input:
3
0 1 2
1 2 2
3 2 2
sample output: 
2
**************************************************************************************
[in worst case use this code . it is incorrect . priority is bottom > right > top > left. ex: output 3 will be 3 but shd be 2]
#include<stdio.h>
#include <limits.h>
#define N 10000
/*
 0 -> bottom
 1 -> right
 2 -> top
 3 -> left
 */
int n;
int mat[N][N],visited[N][N]={0},curr_t=0,id = -1;
int isvalid(int x,int y){
    if(x>=0 && y>=0 && x<n && y<n && !visited[x][y])
        return 1;
    return 0;
}
int min_neig(int x,int y){
    int min = INT_MAX;
    if(isvalid(x,y-1) && min > mat[x][y-1]){
        min = mat[x][y-1];
        id = 3;
    }
    if(isvalid(x-1,y) && min > mat[x-1][y]){
        min = mat[x-1][y];
        id = 2;
    }    
    if(isvalid(x,y+1) && min > mat[x][y+1]){
        min = mat[x][y+1];
        id = 1;
    }
    if(isvalid(x+1,y) && min > mat[x+1][y]){
        min = mat[x+1][y];
        id = 0;
    }
    
    if(min != INT_MAX)
        return min;
    return 0;
}
void find_next(int a,int b){
    int temp_ct = min_neig(a,b);
    if(a == n-1 && b == n-1)
        return ;
    if(temp_ct > curr_t && id != -1)
        curr_t = temp_ct;
    switch(id){
        case 0:
            visited[a+1][b] = 1;
            //printf("current-time : %d AT %d,%d\n",curr_t,a+1,b);
            find_next(a+1,b);
            break;
        case 1:
            visited[a][b+1] = 1;
            //printf("current-time : %d AT %d,%d\n",curr_t,a,b+1);
            find_next(a,b+1);
            break;
        case 2:
            visited[a-1][b] = 1;
            //printf("current-time : %d AT %d,%d\n",curr_t,a-1,b);
            find_next(a-1,b);
            break;
        case 3:
            visited[a][b-1] = 1;
            printf("current-time : %d AT %d,%d\n",curr_t,a,b-1);
            //find_next(a,b-1);
            break;
        case -1:
            return ;
    }
}
int main(){
    scanf("%d",&n);
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            scanf("%d",&mat[i][j]);
        }
    }
    curr_t = mat[0][0];
    visited[0][0] = 1;
    find_next(0,0);
    printf("%d\n",curr_t);
    return 0;
}
