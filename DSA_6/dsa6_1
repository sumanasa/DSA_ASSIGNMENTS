1. Given an array P with elements p1, p2, ..., pn and an n×n sized binary symmetric matrix A, you have to find
the lexicographically minimum permutation which	can	be achieved	by swapping	two	distinct elements pi and pj where the 
condition A[i][j]= 1 holds and 1 ≤ i, j ≤ n.
Input:
First line contains	n.
Second line	contains n elements	of array P.
Each of	the	next n lines contains n2 integers which	denote	matrix	A as a whole. A[i][j] =	1 means	pi and	pj
can	be swapped, otherwise no swapping can be done.
Output:
The	lexicographically minimum permutation that can be achieved by swapping.
Example:
Input:
7
5 2 4 3 6 7 1
0 0 0 1 0 0 1
0 0 0 0 0 0 0
0 0 0 0 0 1 0
1 0 0 0 0 0 1
0 0 0 0 0 0 0 
0 0 1 0 0 0 0
1 0 0 1 0 0 0
Output:
1 2 4 3 6 7 5
**************************************************************************************************
#include <stdio.h>
#include <limits.h>
#include <string.h>
int max , max_index , visited[1000];
void swap(int* x , int* y){int temp = *x ; *x = *y ; *y = temp;}
void getmax(int a[],int n){
    max = a[0];
    max_index = 0;
    for(int i=1;i<n;i++){
        if(max < a[i] && !visited[a[i]]){
            max = a[i];
            max_index = i;
        }
    }
}
int main(){
    int n;
    scanf("%d",&n);
    int arr[n],canswap[n][n];
    memset(visited,0,sizeof(visited));
    for(int i=0;i<n;i++){
        scanf("%d",&arr[i]);
    }
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            int x;
            scanf("%d",&x);
            canswap[i][j] = x;                       
        }
    }
    for(int t=0;t<n;t++){
        getmax(arr,n);
        for(int i = n-1 ; i > max_index ; i--){
            visited[max] = 1;
            if(max > arr[i] && canswap[max_index][i]){
                swap(&arr[max_index],&arr[i]);
                break ;
            }
        }
    }
    for(int i=0; i<n; i++){
        printf("%d ", arr[i]);
    }
}
