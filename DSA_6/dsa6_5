5. Merging	two	arrays	is	an	essential	step	in	merge	sort.	Can	we	do	the	same	in	case	of	linked	list?	Given	2	
sorted	linked	lists, devise	a	way	to	merge	them	while	only	using	O(1)	memory	?
Input:
First	line	contains	the	size	of	the	first	sorted	array.
Second	line	contains	the	elements	of	the	first	sorted	array.
Third	line	contains	the	size	of	the	second	sorted	array.	
Fourth	line	contains	the	elements	of	the	second	sorted	array.
Output:
The	final	merged	sorted	array.
Example:
Input:
5
1	2	3	4	5
6
2	2	4	4	5	5
Output:
1	2	2	2	3	4	4	4	5	5	5
*******************************************************************************************************
METHOD 0 : (space -> O(1) and time -> O(n))
#include <stdio.h>
#include <stdlib.h>

typedef struct Node
{
    int data;
    struct Node* next;
}
Node;

Node* new_node()
{
    Node* new = (Node*) malloc(sizeof(Node));
    new -> next = NULL;
    return new;
}

int main()
{
    Node *head, *head1, *head2, *cur = NULL, *cur1 = NULL, *cur2 = NULL;
    int n, m, d;
    scanf("%d", &n);
    for(int i = 0; i < n; ++i)
    {
        Node* new = new_node();
        scanf("%d", &new->data);
        if(cur1)
            cur1 = cur1 -> next = new;
        else
            head1 = cur1 = new;
    }
    scanf("%d", &m);
    for(int i = 0; i < m; ++i)
    {
        Node* new = new_node();
        scanf("%d", &new->data);
        if(cur2)
            cur2 = cur2 -> next = new;
        else
            head2 = cur2 = new;
    }
    cur1 = head1, cur2 = head2;
    while(1)
    {
        Node* temp;
        if(cur1->data < cur2->data)
            temp = cur1, cur1 = cur1->next;
        else
            temp = cur2, cur2 = cur2->next;
        if(cur)
            cur = cur->next = temp;
        else
            head = cur = temp;
        if(cur1 && cur2)
            temp->next = NULL;
        else
        {
            temp->next = (cur1 ? cur1 : cur2);
            break;
        }
    }
    while(head)
        printf("%d ", head->data), head = head->next;
    return 0;
}

[without considering complexities]
METHOD 1 :
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Node{
    int data ;
    struct Node* next;
};
typedef struct Node node;
void insert(node** head,int x){
    node* new_node  = (node*) malloc(sizeof(node)); //create and initialize
    new_node->data = x;
    new_node->next = NULL;
    
    node* temp = *head;
    if(temp == NULL || temp->data >= x ){       //if empty or to be added at the beginning
        new_node->next = *head;
        *head = new_node;
    }
    else{
        while( (temp->next != NULL) && (temp->next->data < x) ){ // move to the index before the index of the element to be added
            temp = temp->next;
        }
        new_node->next = temp->next;             //connection between new node and the one after it
        temp->next = new_node;                   //connection between left node and the new node
    }     
}
void printlist(node** head){
    node* temp= *head;
    while(temp!=NULL){
        printf("%d ",temp->data);
        temp = temp->next;
    }
    printf("\n");
}
int main() {
    node *head = NULL;
    int k =2,n1,n2,x; 
    scanf("%d",&n1);
    while(n1--){
        scanf("%d",&x);
        insert(&head,x);
    }
    scanf("%d",&n2);
    while(n2--){
        scanf("%d",&x);
        insert(&head,x);
    }
    printlist(&head);
    return 0;
}
******************************************************************************
METHOD 2 :
#include <stdio.h>
#include <stdlib.h>
struct Node{
    int data ;
    struct Node* next;
};
typedef struct Node node;
void insert(node** head,int x){
    node* new_node  = (node*) malloc(sizeof(node)); 
    new_node->data = x;
    new_node->next = NULL;    
    node* temp = *head;
    if(temp == NULL ){      
        *head = new_node;
        return ;
    }
    while( temp->next != NULL ){
        temp = temp->next;
    }
    temp->next = new_node;              
}
node* merge(node* h1 ,node* h2){
    if(!h1)
        return h2;
    else if(!h2)
        return h1;
    else if(h1->data <= h2->data){
        h1->next = merge(h1->next , h2);
        return h1;
    }
    else if(h1->data > h2->data){
        h2->next = merge(h2->next , h1);
        return h2;
    }
}
void printlist(node** head){
    node* temp= *head;
    while(temp!=NULL){
        printf("%d ",temp->data);
        temp = temp->next;
    }
    printf("\n");
}
int main() {
    int x,n1,n2;
    char ch;
    node *head1 = NULL , *head2 = NULL;
    scanf("%d%c",&n1,&ch);
    while(scanf("%d",&x)){
        scanf("%c",&ch);
        insert(&head1,x);
        if(ch != ' ')
            break;
    }
    scanf("%d%c",&n2,&ch);
    while(scanf("%d",&x)){
        scanf("%c",&ch);
        insert(&head2,x);
        if(ch != ' ')
            break;
    }
    node* result = merge(head1,head2);
    printlist(&result);
    return 0;
}

*********************************************************************************************
METHOD 3 :
[INCORRECT . Yet to be changed]
/*void merge(node** head1 ,int n1 ,node** head2 , int n2){
    node* headaux = NULL;
    node* temp1 = *head1 ; node* temp2 = *head2 ;
    if(temp1 == NULL)
        printlist(&temp2);
    if(temp2 == NULL)
        printlist(&temp1);
    while(temp1!=NULL && temp2!=NULL){
        if(temp1->data <= temp2->data){
            insert(&headaux,temp1->data);
            temp1 = temp1->next;
        }
        else if(temp1->data > temp2->data){
            insert(&headaux,temp2->data);
            temp2 = temp2->next;
        }
    } 
    while(temp1!=NULL){
        insert(&headaux,temp1->data);
        temp1 = temp1->next;
    }
    while(temp2!=NULL){
        insert(&headaux,temp2->data);
        temp2 = temp2->next;
    }
    printlist(&headaux);  
}*/
