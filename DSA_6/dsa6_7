7. Sharat	is	currently	at	a	car	rental	service,	and	he	wants	to	reach	a	cinema hall.	The	film	he	has	bought	a	
ticket	for	starts	in	t minutes.	There	is	a	straight	road	of	length	s from	the	car	rental	service	to	the	cinema.	
Let's	introduce	a	coordinate	system	so	that	the	car	rental	service	is	at	the	point	0,	and	the	cinema	is	at	the	
point	s. There	are	k gas	stations	along	the	road,	and	at	each	of	them, you	can	fill	a	car	with	any	amount	of	
fuel	for	free!	Consider	that	this	operation	doesn't	take	any	time,	i.e.	can	be carried	out	instantly. There	are	
n cars	in	the	rental	service,	i-th	of	them	is	characterized	with	two	integers	ci and	vi — the	price	of	renting	
this	car	and	the	capacity	of	its	fuel	tank	in	litres.	It	is	not	possible to	fuel	a	car	with	more	fuel	than	its	tank	
capacity	vi.	All	cars	are	have	fuel	filled	to	the	full	tank	capacity at	the	car	rental	service. Each	of	the	cars	can	
be driven	in	one	of	two	speed	modes:	normal	or	accelerated.	In	the	normal	mode, a	car	covers	1	kilometre
in	2	minutes,	and	consumes	1	litre of	fuel.	In	the	accelerated	mode,	a	car	covers	1	kilometre	in	1	minute,	but	
consumes	2	litres	of	fuel.	The	driving	mode	can	be	changed	at	any	moment	and	any	number	of	times. Your	
task	is	to	choose	a	car	with	minimum	price	such	that	Sharat	can	reach	the	cinema	before	the	show	starts,	
i.e.	not	later	than	in	t minutes.	Assume	that	all	cars	are	completely	fuelled initially.
Input:
The	first	line	contains	four	positive	integers	n,	k,	s and	t — the	number	of	cars	at	the	car	rental	service,	the	
number	of	gas	stations	along	the	road,	the	length	of	the	road	and	the	time	in	which	the	film	starts.
Each	of	the	next	n lines	contains	two	positive	integers	ci and	vi— the	price	of	the	i-th	car	and	its	fuel	tank	
capacity.
The	 next	 line	 contains	 k distinct	 integers	 g1, g2, ..., gk— the	 positions	 of	 the	 gas	 stations	 on	 the	 road	 in	
arbitrary	order.
Output:
Print	the	minimum	rent	price	of	an	appropriate	car,	i.e.	a	car	so	that	Sharat	will	be	able	to	reach	the	cinema	
before	the film	starts	(not	later	than	t minutes).	If	there	is	no	appropriate	car,	print	-1.
Example:
Input:
3	1	8	10
10	8
5	7
11	9
3
Output:
10
**************************************************************************************
#include <stdio.h>
#define N 1000
int arr[N][N],n;
void swap(int* x,int* y){
    int temp = *x;
    *x = *y;
    *y = temp;
}
void sortg(int* arr,int n){
    for(int i=0;i<n-1;i++)
        for(int j=i+1;j<n;j++)
            if(arr[i] > arr[j])
                swap(&arr[i],&arr[j]);
}
void sortc(){
    for(int i=0;i<n-1;i++)
        for(int j=i+1;j<n;j++)
            if(arr[i][0] > arr[j][0]){
                swap(&arr[i][0],&arr[j][0]);
                swap(&arr[i][1],&arr[j][1]);
            }
}
int main(){
    int gas[N];
    int k,s,t;
    scanf("%d%d%d%d",&n,&k,&s,&t);
    for(int i=0;i<n;i++)
        scanf("%d%d",&arr[i][0],&arr[i][1]);        
    for(int i=1;i<=k;i++)
        scanf("%d",&gas[i]);
    gas[0]=0;
    gas[k+1]=s;
    sortg(gas,k);
    sortc();
    int normal_dist = t-s;                          // x + y = s ; x/1 + y/(1/2) = t; solving these two eqtns you get x,y.
    int acc_distmin = s - normal_dist;
    for(int i=0;i<n;i++){
        int acc_dist=0 , cap = arr[i][1] , flag=0;
        for(int j=0;j<=k;j++){
            int gap = gas[j+1]-gas[j];
            if(cap < gap)
                break;
            else if(cap > 2*gap)                    /* i.e if complete motion can be covered in accelerated motion i.e with 2km/min speed which consumes 
                                                      2*dist litres of petrol hence if cap>2*dist whole dist is covered with velocity = 2; */
                acc_dist += gap;
            else
                acc_dist += cap - gap;              //i.e if x with vel=1 and y with vel = 2 ... cap = x + 2*y ; dist = x + y;
        }
        if(acc_dist >= acc_distmin){
            printf("%d\n",arr[i][0]);
            return 0;
        }
    }
    printf("-1\n");
    return 0;
}

*******************************************************
[original]
#include <stdio.h>
#include <stdlib.h>
int n,k,s,t;
int mat[1000][2];
int g[1000];
void swap(int *a, int *b){int temp = *a;*a = *b;*b = temp;}
void bubblesortg(){
    for(int i=0; i<k+2; i++)
        for(int j=0; j<(k+2-i-1); j++)
            if(g[j]>g[j+1]){
                swap(&g[j+1],&g[j]);
            }
}
void bubblesortc(){
    for(int i=0; i<n; i++)
        for(int j=0; j<(n-i-1); j++)
            if(mat[j][1]>mat[j+1][1]){
                swap(&mat[j+1][0],&mat[j][0]);
                swap(&mat[j+1][1],&mat[j][1]);
            }
}
int main(){
    scanf("%d%d%d%d",&n,&k,&s,&t);
    int max_normal= t-s;                  // x + y = s ; x/1 + y/(1/2) = t; solving these two eqtns you get x,y.
    int min_accl = s-max_normal;
    for(int i=0;i<n;i++)
        scanf("%d%d",&mat[i][0],&mat[i][1]);
    for(int i=1;i<=k;i++)
        scanf("%d",&g[i]);
    g[0]=0;
    g[k+1]=s;
    bubblesortc();
    bubblesortg();
    for(int i=0;i<n;i++){
        int flag=0,accl=0;
        int cap=mat[i][1];
        for(int j=0;j<=k;j++){
            int dist=g[j+1]-g[j];
            if(dist>cap){
                flag=1;
                break;
            }
            else
                if(dist<(cap-dist))   // i.e if complete motion can be covered in accelerated motion i.e with 2km/min speed which consumes 
                                      // 2*dist litres of petrol hence if cap>2*dist whole dist is covered with velocity = 2;
                    accl+=dist;
                else
                    accl+=cap-dist;   //i.e if x with vel=1 and y with vel = 2 ... cap = x + 2*y ; dist = x + y; hence y = cap - dist;
        }
        if(flag)
            continue;
        if(accl>=min_accl)
            printf("%d\n",mat[i][0]);
    }
    return 0;
}
