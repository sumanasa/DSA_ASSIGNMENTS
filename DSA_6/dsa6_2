2. You	want	to	sort	n different	arrays	(each	of	size	m)	simultaneously.	You can	choose	a	pair	of	distinct	indices	
i and	j (1 ≤ i, j ≤ m, i ≠ j).	Then, in	each	array, the	values	at	positions	i and	j are	swapped	only	if	the	value	at	
position	i is	strictly	greater	than	the	value	at	position	j.	You	want to	find	an	array	containing pairs	of	distinct	
indices	that,	chosen	in	order, will	sort	all	of	the	n arrays	in	ascending order	or	descending	order.
Input:
Two	integers	n (no.	of	arrays)	and	m (size	of	each	array)	and	k (k is	zero	if	sorting	is	to	be	done	in	ascending	
order	and	1	if	sorting	is	to	be	done	in	descending	order).
Each	of	the	next	m lines	contains	the	arrays	of	size	m.
Output:	
In the	first	line	of	the	output, print	an	integer	p,	the	size	of	the	array	(p can	be	at	most	m*(m-1)/2).	Each of	
the	next	p lines	must	contain	two	distinct	integers	i and	j (1 ≤ i, j ≤ m, i ≠ j),	representing	the	chosen	indices.
Example:
Input:
2	5	0
1	3	2	5	4
1	4	3	2	5
Output:
3
2	4
2	3
4	5
************************************************************************
#include<stdio.h>
// we know that j>i always
// if descending then big ones should come to the left
// so left index should be higher
int main(){
    int n,m,desc;
    scanf("%d%d%d",&n,&m,&desc);
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            scanf("%*d");     
            // * is used so as to tell it to read and ignore
            // printf("%*d",5,10); prints 10 with total width of 5
        }
    }
    for(int i=1;i<=m;i++){    // note : both are m
        for(int j=i+1;j<=m;j++){
            printf("%d %d\n",desc?j:i,desc?i:j);
        }
    }
}
